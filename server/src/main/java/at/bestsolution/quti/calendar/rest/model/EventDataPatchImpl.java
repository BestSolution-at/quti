// Generated by RSD - Do not modify
package at.bestsolution.quti.calendar.rest.model;

import java.time.ZonedDateTime;
import java.util.function.Function;
import java.util.List;
import java.util.Optional;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;
import jakarta.json.JsonString;

import at.bestsolution.quti.calendar.service.model._Base;
import at.bestsolution.quti.calendar.service.model.Event;
import at.bestsolution.quti.calendar.service.model.EventRepeat;
import at.bestsolution.quti.calendar.service.model.EventRepeatAbsoluteMonthly;
import at.bestsolution.quti.calendar.service.model.EventRepeatAbsoluteYearly;
import at.bestsolution.quti.calendar.service.model.EventRepeatDaily;
import at.bestsolution.quti.calendar.service.model.EventRepeatRelativeMonthly;
import at.bestsolution.quti.calendar.service.model.EventRepeatRelativeYearly;
import at.bestsolution.quti.calendar.service.model.EventRepeatWeekly;

public class EventDataPatchImpl extends _BaseDataImpl implements Event.Patch {
	EventDataPatchImpl(JsonObject data) {
		super(data);
	}

	public String key() {
		return _JsonUtils.mapString(data, "key");
	}

	public Optional<String> title() {
		return _JsonUtils.mapOptString(data, "title");
	}

	public _Base.Nillable<String> description() {
		return _JsonUtils.mapNilString(data, "description");
	}

	public Optional<ZonedDateTime> start() {
		return _JsonUtils.mapOptZonedDateTime(data, "start");
	}

	public Optional<ZonedDateTime> end() {
		return _JsonUtils.mapOptZonedDateTime(data, "end");
	}

	public _Base.Nillable<Boolean> fullday() {
		return _JsonUtils.mapNilBoolean(data, "fullday");
	}

	public _Base.Nillable<_Base.Change<_Base.SetChange<EventRepeat.Data>, _Base.DeltaChange<EventRepeat.Patch>>> repeat() {
		return _JsonUtils.mapNilObject(data, "repeat", o -> _ChangeImpl.of(o, EventRepeatDataImpl::of, EventRepeatDataPatchImpl::of));
	}

	public Optional<_Base.ListChange<_Base.ListSetElementsChange<String>, _Base.ListAddRemoveChange<String, String>>> tags() {
		return _JsonUtils.mapOptObject(data, "tags", o -> _ListChangeImpl.of(o, v -> ((JsonString)v).getString()));
	}

	public Optional<_Base.ListChange<_Base.ListSetElementsChange<String>, _Base.ListAddRemoveChange<String, String>>> referencedCalendars() {
		return _JsonUtils.mapOptObject(data, "referencedCalendars", o -> _ListChangeImpl.of(o, v -> ((JsonString)v).getString()));
	}

	public static class PatchBuilderImpl implements Event.PatchBuilder {
		private JsonObjectBuilder $builder = Json.createObjectBuilder();

		public Event.PatchBuilder key(String key) {
			$builder.add("key", key);
			return this;
		}

		@Override
		public Event.PatchBuilder title(String title) {
			$builder.add("title", title);
			return this;
		}

		@Override
		public Event.PatchBuilder description(String description) {
			if (description == null) {
				$builder.addNull("description");
				return this;
			}
			$builder.add("description", description);
			return this;
		}

		@Override
		public Event.PatchBuilder start(ZonedDateTime start) {
			$builder.add("start", start.toString());
			return this;
		}

		@Override
		public Event.PatchBuilder end(ZonedDateTime end) {
			$builder.add("end", end.toString());
			return this;
		}

		@Override
		public Event.PatchBuilder fullday(Boolean fullday) {
			if (fullday == null) {
				$builder.addNull("fullday");
				return this;
			}
			$builder.add("fullday", fullday);
			return this;
		}

		@Override
		public Event.PatchBuilder repeat(EventRepeat repeat) {
			if (repeat == null) {
				$builder.addNull("repeat");
				return this;
			}

			var $changeBuilder = Json.createObjectBuilder();
			if (repeat instanceof EventRepeat.Patch) {
				$changeBuilder.add("@type", "delta-change");
				$changeBuilder.add("delta", ((_BaseDataImpl) repeat).data);
			} else {
				$changeBuilder.add("@type", "set-change");
				$changeBuilder.add("value", ((_BaseDataImpl) repeat).data);
			}

			$builder.add("repeat", $changeBuilder.build());
			return this;
		}

		public <T extends EventRepeat.Builder> Event.PatchBuilder withRepeat(Class<T> clazz, Function<T, EventRepeat> block) {
			EventRepeat.Builder b;
			if (clazz == EventRepeatDaily.DataBuilder.class) {
				b = EventRepeatDailyDataImpl.builder();
			} else if (clazz == EventRepeatWeekly.DataBuilder.class) {
				b = EventRepeatWeeklyDataImpl.builder();
			} else if (clazz == EventRepeatAbsoluteMonthly.DataBuilder.class) {
				b = EventRepeatAbsoluteMonthlyDataImpl.builder();
			} else if (clazz == EventRepeatAbsoluteYearly.DataBuilder.class) {
				b = EventRepeatAbsoluteYearlyDataImpl.builder();
			} else if (clazz == EventRepeatRelativeMonthly.DataBuilder.class) {
				b = EventRepeatRelativeMonthlyDataImpl.builder();
			} else if (clazz == EventRepeatRelativeYearly.DataBuilder.class) {
				b = EventRepeatRelativeYearlyDataImpl.builder();
			} else if (clazz == EventRepeatDaily.PatchBuilder.class) {
				b = EventRepeatDailyDataPatchImpl.builder();
			} else if (clazz == EventRepeatWeekly.PatchBuilder.class) {
				b = EventRepeatWeeklyDataPatchImpl.builder();
			} else if (clazz == EventRepeatAbsoluteMonthly.PatchBuilder.class) {
				b = EventRepeatAbsoluteMonthlyDataPatchImpl.builder();
			} else if (clazz == EventRepeatAbsoluteYearly.PatchBuilder.class) {
				b = EventRepeatAbsoluteYearlyDataPatchImpl.builder();
			} else if (clazz == EventRepeatRelativeMonthly.PatchBuilder.class) {
				b = EventRepeatRelativeMonthlyDataPatchImpl.builder();
			} else if (clazz == EventRepeatRelativeYearly.PatchBuilder.class) {
				b = EventRepeatRelativeYearlyDataPatchImpl.builder();
			} else {
				throw new IllegalArgumentException("Unsupported builder type %s".formatted(clazz));
			}

			return repeat(block.apply(clazz.cast(b)));
		}

		@Override
		public Event.PatchBuilder tags(_Base.ListChange<_Base.ListSetElementsChange<String>, _Base.ListAddRemoveChange<String, String>> tags) {
			$builder.add("tags", ((_BaseDataImpl) tags).data);
			return this;
		}

		public Event.PatchBuilder tags(List<String> additions, List<String> removals) {
			var $changeBuilder = Json.createObjectBuilder();
			$changeBuilder.add("@type", "delta-change");
			$changeBuilder.add("additions", _JsonUtils.toJsonStringArray(additions));
			$changeBuilder.add("removals", _JsonUtils.toJsonStringArray(removals));
			$builder.add("tags", $changeBuilder.build());
			return this;
		}

		public Event.PatchBuilder tags(List<String> elements) {
			var $changeBuilder = Json.createObjectBuilder();
			$changeBuilder.add("@type", "elements-change");
			$changeBuilder.add("elements", _JsonUtils.toJsonLiteralArray(elements));
			$builder.add("tags", $changeBuilder.build());
			return this;
		}

		@Override
		public Event.PatchBuilder referencedCalendars(_Base.ListChange<_Base.ListSetElementsChange<String>, _Base.ListAddRemoveChange<String, String>> referencedCalendars) {
			$builder.add("referencedCalendars", ((_BaseDataImpl) referencedCalendars).data);
			return this;
		}

		public Event.PatchBuilder referencedCalendars(List<String> additions, List<String> removals) {
			var $changeBuilder = Json.createObjectBuilder();
			$changeBuilder.add("@type", "delta-change");
			$changeBuilder.add("additions", _JsonUtils.toJsonStringArray(additions));
			$changeBuilder.add("removals", _JsonUtils.toJsonStringArray(removals));
			$builder.add("referencedCalendars", $changeBuilder.build());
			return this;
		}

		public Event.PatchBuilder referencedCalendars(List<String> elements) {
			var $changeBuilder = Json.createObjectBuilder();
			$changeBuilder.add("@type", "elements-change");
			$changeBuilder.add("elements", _JsonUtils.toJsonLiteralArray(elements));
			$builder.add("referencedCalendars", $changeBuilder.build());
			return this;
		}

		@Override
		public Event.Patch build() {
			return new EventDataPatchImpl($builder.build());
		}
	}

	public static Event.Patch of(JsonObject obj) {
		return new EventDataPatchImpl(obj);
	}

	public static PatchBuilderImpl builder() {
		return new PatchBuilderImpl();
	}
}
