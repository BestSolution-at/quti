// Generated by RSD - Do not modify
package at.bestsolution.quti.calendar.rest.model;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;
import jakarta.json.JsonString;

import at.bestsolution.quti.calendar.service.model._Base;
import at.bestsolution.quti.calendar.service.model.EventRepeatRelativeYearly;

public class EventRepeatRelativeYearlyDataPatchImpl extends _BaseDataImpl implements EventRepeatRelativeYearly.Patch {
	EventRepeatRelativeYearlyDataPatchImpl(JsonObject data) {
		super(data);
	}

	public Optional<_Base.ListChange<_Base.ListSetElementsChange<DayOfWeek>, _Base.ListAddRemoveChange<DayOfWeek, DayOfWeek>>> daysOfWeek() {
		return _JsonUtils.mapOptObject(data, "daysOfWeek", o -> _ListChangeImpl.of(o, v -> DayOfWeek.valueOf(((JsonString)v).getString())));
	}

	public Optional<Month> month() {
		return _JsonUtils.mapOptLiteral(data, "month", Month::valueOf);
	}

	public Optional<Short> interval() {
		return _JsonUtils.mapOptShort(data, "interval");
	}

	public _Base.Nillable<LocalDate> endDate() {
		return _JsonUtils.mapNilLocalDate(data, "endDate");
	}

	public Optional<ZoneId> timeZone() {
		return _JsonUtils.mapOptLiteral(data, "timeZone", ZoneId::of);
	}

	public static class PatchBuilderImpl implements EventRepeatRelativeYearly.PatchBuilder {
		private JsonObjectBuilder $builder = Json.createObjectBuilder();

		public PatchBuilderImpl() {
			$builder.add("@type", "patch:relative-yearly");
		}

		@Override
		public EventRepeatRelativeYearly.PatchBuilder daysOfWeek(_Base.ListChange<_Base.ListSetElementsChange<DayOfWeek>, _Base.ListAddRemoveChange<DayOfWeek, DayOfWeek>> daysOfWeek) {
			$builder.add("daysOfWeek", ((_BaseDataImpl) daysOfWeek).data);
			return this;
		}

		public EventRepeatRelativeYearly.PatchBuilder daysOfWeek(List<DayOfWeek> additions, List<DayOfWeek> removals) {
			var $changeBuilder = Json.createObjectBuilder();
			$changeBuilder.add("@type", "delta-change");
			$changeBuilder.add("additions", _JsonUtils.toJsonLiteralArray(additions));
			$changeBuilder.add("removals", _JsonUtils.toJsonLiteralArray(removals));
			$builder.add("daysOfWeek", $changeBuilder.build());
			return this;
		}

		public EventRepeatRelativeYearly.PatchBuilder daysOfWeek(List<DayOfWeek> elements) {
			var $changeBuilder = Json.createObjectBuilder();
			$changeBuilder.add("@type", "elements-change");
			$changeBuilder.add("elements", _JsonUtils.toJsonLiteralArray(elements));
			$builder.add("daysOfWeek", $changeBuilder.build());
			return this;
		}

		@Override
		public EventRepeatRelativeYearly.PatchBuilder month(Month month) {
			;
			return this;
		}

		@Override
		public EventRepeatRelativeYearly.PatchBuilder interval(short interval) {
			$builder.add("interval", interval);
			return this;
		}

		@Override
		public EventRepeatRelativeYearly.PatchBuilder endDate(LocalDate endDate) {
			if (endDate == null) {
				$builder.addNull("endDate");
				return this;
			}
			$builder.add("endDate", endDate.toString());
			return this;
		}

		@Override
		public EventRepeatRelativeYearly.PatchBuilder timeZone(ZoneId timeZone) {
			$builder.add("timeZone", timeZone.toString());
			return this;
		}

		@Override
		public EventRepeatRelativeYearly.Patch build() {
			return new EventRepeatRelativeYearlyDataPatchImpl($builder.build());
		}
	}

	public static EventRepeatRelativeYearly.Patch of(JsonObject obj) {
		return new EventRepeatRelativeYearlyDataPatchImpl(obj);
	}

	public static PatchBuilderImpl builder() {
		return new PatchBuilderImpl();
	}
}
