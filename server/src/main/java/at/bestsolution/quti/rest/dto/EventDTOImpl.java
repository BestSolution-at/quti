// Generated by RSD - Do not modify
package at.bestsolution.quti.rest.dto;

import java.time.ZonedDateTime;
import java.util.function.Function;
import java.util.List;

import at.bestsolution.quti.service.dto.EventDTO;
import at.bestsolution.quti.service.dto.EventRepeatAbsoluteMonthlyDTO;
import at.bestsolution.quti.service.dto.EventRepeatAbsoluteYearlyDTO;
import at.bestsolution.quti.service.dto.EventRepeatDailyDTO;
import at.bestsolution.quti.service.dto.EventRepeatDTO;
import at.bestsolution.quti.service.dto.EventRepeatRelativeMonthlyDTO;
import at.bestsolution.quti.service.dto.EventRepeatRelativeYearlyDTO;
import at.bestsolution.quti.service.dto.EventRepeatWeeklyDTO;

public class EventDTOImpl implements EventDTO {
	public String key;
	public String title;
	public String description;
	public ZonedDateTime start;
	public ZonedDateTime end;
	public boolean fullday;
	public EventRepeatDTOImpl repeat;
	public List<String> tags;
	public List<String> referencedCalendars;

	public String key() {
		return this.key;
	}

	public String title() {
		return this.title;
	}

	public String description() {
		return this.description;
	}

	public ZonedDateTime start() {
		return this.start;
	}

	public ZonedDateTime end() {
		return this.end;
	}

	public boolean fullday() {
		return this.fullday;
	}

	public EventRepeatDTO repeat() {
		return this.repeat;
	}

	public List<String> tags() {
		return this.tags;
	}

	public List<String> referencedCalendars() {
		return this.referencedCalendars;
	}

	public static EventDTOImpl of(EventDTO source) {
		if (source == null) {
			return null;
		} else if (source instanceof EventDTOImpl) {
			return (EventDTOImpl) source;
		}
		var rv = new EventDTOImpl();
		rv.key = source.key();
		rv.title = source.title();
		rv.description = source.description();
		rv.start = source.start();
		rv.end = source.end();
		rv.fullday = source.fullday();
		rv.repeat = EventRepeatDTOImpl.of(source.repeat());
		rv.tags = source.tags();
		rv.referencedCalendars = source.referencedCalendars();
		return rv;
	}

	public static class BuilderImpl implements EventDTO.Builder {
		public String key;
		public String title;
		public String description;
		public ZonedDateTime start;
		public ZonedDateTime end;
		public boolean fullday;
		public EventRepeatDTOImpl repeat;
		public List<String> tags;
		public List<String> referencedCalendars;

		public EventDTO.Builder key(String key) {
			this.key = key;
			return this;
		}

		public EventDTO.Builder title(String title) {
			this.title = title;
			return this;
		}

		public EventDTO.Builder description(String description) {
			this.description = description;
			return this;
		}

		public EventDTO.Builder start(ZonedDateTime start) {
			this.start = start;
			return this;
		}

		public EventDTO.Builder end(ZonedDateTime end) {
			this.end = end;
			return this;
		}

		public EventDTO.Builder fullday(boolean fullday) {
			this.fullday = fullday;
			return this;
		}

		public EventDTO.Builder repeat(at.bestsolution.quti.service.dto.EventRepeatDTO repeat) {
			this.repeat = EventRepeatDTOImpl.of(repeat);
			return this;
		}

		public EventDTO.Builder tags(List<String> tags) {
			this.tags = tags;
			return this;
		}

		public EventDTO.Builder referencedCalendars(List<String> referencedCalendars) {
			this.referencedCalendars = referencedCalendars;
			return this;
		}

		public <T extends EventRepeatDTO.Builder> Builder withRepeat(Class<T> clazz, Function<T, EventRepeatDTO> block) {
			EventRepeatDTOImpl.Builder b;
			if (clazz == EventRepeatDailyDTO.Builder.class) {
				b = new EventRepeatDailyDTOImpl.BuilderImpl();
			} else if (clazz == EventRepeatWeeklyDTO.Builder.class) {
				b = new EventRepeatWeeklyDTOImpl.BuilderImpl();
			} else if (clazz == EventRepeatAbsoluteMonthlyDTO.Builder.class) {
				b = new EventRepeatAbsoluteMonthlyDTOImpl.BuilderImpl();
			} else if (clazz == EventRepeatAbsoluteYearlyDTO.Builder.class) {
				b = new EventRepeatAbsoluteYearlyDTOImpl.BuilderImpl();
			} else if (clazz == EventRepeatRelativeMonthlyDTO.Builder.class) {
				b = new EventRepeatRelativeMonthlyDTOImpl.BuilderImpl();
			} else if (clazz == EventRepeatRelativeYearlyDTO.Builder.class) {
				b = new EventRepeatRelativeYearlyDTOImpl.BuilderImpl();
			} else {
				throw new IllegalArgumentException();
			}
			this.repeat = (EventRepeatDTOImpl) block.apply(clazz.cast(b));
			return this;
		}

		public at.bestsolution.quti.service.dto.EventDTO build() {
			var rv = new EventDTOImpl();
			rv.key = key;
			rv.title = title;
			rv.description = description;
			rv.start = start;
			rv.end = end;
			rv.fullday = fullday;
			rv.repeat = repeat;
			rv.tags = tags;
			rv.referencedCalendars = referencedCalendars;
			return rv;
		}
	}

	public static EventDTO.Builder builder() {
		return new BuilderImpl();
	}
}
