// Generated by RSD - Do not modify
package at.bestsolution.quti.rest.dto;

import java.time.ZonedDateTime;
import java.util.function.Function;
import java.util.List;

import at.bestsolution.quti.service.dto.EventNewDTO;
import at.bestsolution.quti.service.dto.EventRepeatDTO;

public record EventNewDTOImpl(
    String title,
    String description,
    ZonedDateTime start,
    ZonedDateTime end,
    boolean fullday,
    EventRepeatDTOImpl repeat,
    List<String> tags,
    List<String> referencedCalendars) implements EventNewDTO {

    public static EventNewDTOImpl of(EventNewDTO source) {
        if(source == null) {
            return null;
        }
        else if(source instanceof EventNewDTOImpl) {
            return (EventNewDTOImpl)source;
        }
        return new EventNewDTOImpl(
            source.title(),
            source.description(),
            source.start(),
            source.end(),
            source.fullday(),
            EventRepeatDTOImpl.of(source.repeat()),
            source.tags(),
            source.referencedCalendars()
        );
    }
    public static class BuilderImpl implements Builder {
        String title;
        String description;
        ZonedDateTime start;
        ZonedDateTime end;
        boolean fullday;
        EventRepeatDTOImpl repeat;
        List<String> tags;
        List<String> referencedCalendars;

        public Builder title(String title) {
            this.title = title;
            return this;
        }
        public Builder description(String description) {
            this.description = description;
            return this;
        }
        public Builder start(ZonedDateTime start) {
            this.start = start;
            return this;
        }
        public Builder end(ZonedDateTime end) {
            this.end = end;
            return this;
        }
        public Builder fullday(boolean fullday) {
            this.fullday = fullday;
            return this;
        }
        public Builder repeat(at.bestsolution.quti.service.dto.EventRepeatDTO repeat) {
            this.repeat = EventRepeatDTOImpl.of(repeat);
            return this;
        }
        public Builder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder referencedCalendars(List<String> referencedCalendars) {
            this.referencedCalendars = referencedCalendars;
            return this;
        }
        public <T extends EventRepeatDTO.Builder> Builder withRepeat(Class<T> clazz, Function<T, EventRepeatDTO> block) {
            EventRepeatDTOImpl.Builder b;
            if( clazz == EventRepeatDTO.EventRepeatDailyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatDailyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatWeeklyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatWeeklyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatAbsoluteMonthlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatAbsoluteMonthlyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatAbsoluteYearlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatAbsoluteYearlyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatRelativeMonthlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatRelativeMonthlyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatRelativeYearlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatRelativeYearlyDTOImpl.BuilderImpl();
            } else {
                throw new IllegalArgumentException();
            }
            this.repeat = (EventRepeatDTOImpl)block.apply(clazz.cast(b));
            return this;
        }

        public at.bestsolution.quti.service.dto.EventNewDTO build() {
            return new EventNewDTOImpl(title, description, start, end, fullday, repeat, tags, referencedCalendars);
        }
    }

    public static Builder builder() {
        return new BuilderImpl();
    }
}