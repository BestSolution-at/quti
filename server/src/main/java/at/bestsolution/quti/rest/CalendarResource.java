// Generated by RSD - Do not modify
package at.bestsolution.quti.rest;

import java.time.LocalDate;
import java.time.ZoneId;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.HeaderParam;
import jakarta.ws.rs.PATCH;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

import at.bestsolution.quti.service.CalendarService;
import at.bestsolution.quti.service.InvalidArgumentException;
import at.bestsolution.quti.service.InvalidContentException;
import at.bestsolution.quti.service.model.Calendar;
import at.bestsolution.quti.service.model.CalendarNew;
import at.bestsolution.quti.service.NotFoundException;

@ApplicationScoped
@Path("/api/calendar")
@Produces(MediaType.APPLICATION_JSON)
public class CalendarResource {
    private final RestBuilderFactory builderFactory;
    private final CalendarService service;
    private final CalendarResourceResponseBuilder responseBuilder;

    @Inject
    public CalendarResource(CalendarService service, CalendarResourceResponseBuilder responseBuilder, RestBuilderFactory builderFactory) {
        this.builderFactory = builderFactory;
        this.service = service;
        this.responseBuilder = responseBuilder;
    }

    @POST
    public Response create(String _calendar) {
        var calendar = builderFactory.of(CalendarNew.Data.class, _calendar);
        try {
            var result = service.create(builderFactory, calendar);
            return responseBuilder.create(result,calendar).build();
        } catch(InvalidContentException e) {
            return _RestUtils.toResponse(422, e);
        }
    }

    @GET
    @Path("{key}")
    public Response get(@PathParam("key") String _key) {
        var key = _key;
        try {
            var result = service.get(builderFactory, key);
            return responseBuilder.get(result,key).build();
        } catch(NotFoundException e) {
            return _RestUtils.toResponse(404, e);
        } catch(InvalidArgumentException e) {
            return _RestUtils.toResponse(400, e);
        }
    }

    @PATCH
    @Path("{key}")
    public Response update(
        @PathParam("key") String _key,
        String _changes) {
        var key = _key;
        var changes = builderFactory.of(Calendar.Patch.class, _changes);
        try {
            service.update(builderFactory, key, changes);
            return responseBuilder.update(key, changes).build();
        } catch(NotFoundException e) {
            return _RestUtils.toResponse(404, e);
        } catch(InvalidArgumentException e) {
            return _RestUtils.toResponse(400, e);
        }
    }

    @GET
    @Path("{key}/view")
    public Response eventView(
        @PathParam("key") String _key,
        @QueryParam("from") LocalDate _start,
        @QueryParam("to") LocalDate _end,
        @QueryParam("timezone") String _timezone,
        @HeaderParam("timezone") String _resultTimeZone) {
        var key = _key;
        var start = _start;
        var end = _end;
        var timezone = _timezone == null ? null : ZoneId.of(_timezone);
        var resultTimeZone = _resultTimeZone == null ? null : ZoneId.of(_resultTimeZone);
        try {
            var result = service.eventView(builderFactory, key, start, end, timezone, resultTimeZone);
            return responseBuilder.eventView(result,key, start, end, timezone, resultTimeZone).build();
        } catch(NotFoundException e) {
            return _RestUtils.toResponse(404, e);
        } catch(InvalidArgumentException e) {
            return _RestUtils.toResponse(400, e);
        }
    }

}
