// Generated by RSD - Do not modify
import { isSingleEventView, type SingleEventView, SingleEventViewFromJSON, SingleEventViewToJSON } from './SingleEventView.ts';
import { isSeriesMovedEventView, type SeriesMovedEventView, SeriesMovedEventViewFromJSON, SeriesMovedEventViewToJSON } from './SeriesMovedEventView.ts';
import { isSeriesEventView, type SeriesEventView, SeriesEventViewFromJSON, SeriesEventViewToJSON } from './SeriesEventView.ts';
import { isString } from '../_type-utils.ts';

export type EventView = SingleEventView | SeriesMovedEventView | SeriesEventView;

export function isEventView(value: unknown) {
	return isSingleEventView(value) || isSeriesMovedEventView(value) || isSeriesEventView(value);
}

export function EventViewFromJSON(value: Record<string, unknown>): EventView {
	const descriminator = value['@type'];

	if(!isString(descriminator)) {
		throw new Error('No valid descriminator found');
	}
	switch(descriminator) {
		case 'single':
			return SingleEventViewFromJSON(value);
		case 'series-moved':
			return SeriesMovedEventViewFromJSON(value);
		case 'series':
			return SeriesEventViewFromJSON(value);
		default:
			throw new Error(`Unknown descriminator "${descriminator}"`);
	}
}
export function EventViewToJSON(value: EventView): Record<string, unknown> {
	const $desc = value['@type'];
	switch($desc) {
		case 'single':
			return SingleEventViewToJSON(value);
		case 'series-moved':
			return SeriesMovedEventViewToJSON(value);
		case 'series':
			return SeriesEventViewToJSON(value);
		default:
			throw new Error(`Unknown descriminator "${$desc}";`)
	}
}
