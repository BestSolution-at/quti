// Generated by RSD - Do not modify
import { type EventRepeat, EventRepeatFromJSON, EventRepeatOrPatchFromJSON, EventRepeatOrPatchToJSON, type EventRepeatPatch, EventRepeatPatchFromJSON, EventRepeatPatchToJSON, EventRepeatToJSON, isEventRepeat, isEventRepeatPatch } from './EventRepeat.ts';
import { checkOptProp, checkProp, createReplaceAddRemoveGuard, createTypedArrayGuard, isBoolean, isNull, isRecord, isString, isUndefined, type ListMergeAddRemove, ListMergeAddRemoveFromJSON, type ListReplace, noopMap, propListValue, propMappedValue, propValue } from '../_type-utils.ts';

export type Event = {
	readonly key: string;
	readonly title: string;
	readonly description?: string;
	readonly start: string;
	readonly end: string;
	readonly fullday?: boolean;
	readonly repeat?: EventRepeat;
	readonly tags: string[];
	readonly referencedCalendars: string[];
};

export function isEvent(value: unknown): value is Event {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'title', isString) &&
		checkOptProp(value, 'description', isString) &&
		checkProp(value, 'start', isString) &&
		checkProp(value, 'end', isString) &&
		checkOptProp(value, 'fullday', isBoolean) &&
		checkOptProp(value, 'repeat', isEventRepeat) &&
		checkProp(value, 'tags', createTypedArrayGuard(isString)) &&
		checkProp(value, 'referencedCalendars', createTypedArrayGuard(isString));
}

export function EventFromJSON($value: Record<string, unknown>): Event {
	const key = propValue('key', $value, isString);
	const title = propValue('title', $value, isString);
	const description = propValue('description', $value, isString, 'optional');
	const start = propValue('start', $value, isString);
	const end = propValue('end', $value, isString);
	const fullday = propValue('fullday', $value, isBoolean, 'optional');
	const repeat = propMappedValue('repeat', $value, isRecord, EventRepeatFromJSON, 'optional');
	const tags = propListValue('tags', $value, isString);
	const referencedCalendars = propListValue('referencedCalendars', $value, isString);
	return {
		key,
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

export function EventToJSON($value: Event): Record<string, unknown> {
	const key = $value.key;
	const title = $value.title;
	const description = $value.description;
	const start = $value.start;
	const end = $value.end;
	const fullday = $value.fullday;
	const repeat = isUndefined($value.repeat) ? undefined : EventRepeatToJSON($value.repeat);
	const tags = $value.tags;
	const referencedCalendars = $value.referencedCalendars;

	return {
		key,
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

type $TagsReplace = ListReplace<string>;
type $TagsMerge = ListMergeAddRemove<string, string>;
type $TagsPatch = $TagsReplace | $TagsMerge;

type $ReferencedCalendarsReplace = ListReplace<string>;
type $ReferencedCalendarsMerge = ListMergeAddRemove<string, string>;
type $ReferencedCalendarsPatch = $ReferencedCalendarsReplace | $ReferencedCalendarsMerge;

type $RepeatPatch = EventRepeat | EventRepeatPatch;

export type EventPatch = {
	readonly key: string;
	readonly title?: string;
	readonly description?: string | null;
	readonly start?: string;
	readonly end?: string;
	readonly fullday?: boolean | null;
	readonly repeat?: $RepeatPatch | null;
	readonly tags?: $TagsPatch;
	readonly referencedCalendars?: $ReferencedCalendarsPatch;
};

export function isEventPatch(value: unknown): value is EventPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkOptProp(value, 'title', isString) &&
		(checkOptProp(value, 'description', isNull) || checkOptProp(value, 'description', isString)) &&
		checkOptProp(value, 'start', isString) &&
		checkOptProp(value, 'end', isString) &&
		(checkOptProp(value, 'fullday', isNull) || checkOptProp(value, 'fullday', isBoolean)) &&
		(checkOptProp(value, 'repeat', isNull) || checkOptProp(value, 'repeat', isEventRepeatPatch)) &&
		checkOptProp(value, 'tags', createReplaceAddRemoveGuard(isString)) &&
		checkOptProp(value, 'referencedCalendars', createReplaceAddRemoveGuard(isString));
}

export function EventPatchFromJSON($value: Record<string, unknown>): EventPatch {
	const key = propValue('key', $value, isString);
	const title = propValue('title', $value, isString, 'optional');
	const description = propValue('description', $value, isString, 'optional_null');
	const start = propValue('start', $value, isString, 'optional');
	const end = propValue('end', $value, isString, 'optional');
	const fullday = propValue('fullday', $value, isBoolean, 'optional_null');
	const repeat = propMappedValue('repeat', $value, isRecord, EventRepeatOrPatchFromJSON, 'optional_null');
	const tags = propMappedValue('tags', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional');
	const referencedCalendars = propMappedValue('referencedCalendars', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional');
	return {
		key,
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

export function EventPatchToJSON($value: EventPatch): Record<string, unknown> {
	const key = $value.key;
	const title = $value.title;
	const description = $value.description;
	const start = $value.start;
	const end = $value.end;
	const fullday = $value.fullday;
	const repeat = isUndefined($value.repeat) || isNull($value.repeat) ? $value.repeat : EventRepeatOrPatchToJSON($value.repeat);
	const tags = $value.tags;
	const referencedCalendars = $value.referencedCalendars;

	return {
		key,
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

