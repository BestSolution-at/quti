// Generated by RSD - Do not modify
import { DayOfWeek, isDayOfWeek } from './DayOfWeek.ts';
import { checkOptProp, checkProp, createIsStringTypeGuard, createTypedArrayGuard, isNull, isNumber, isRecord, isString, propListValue, propValue } from '../_type-utils.ts';

export type EventRepeatWeekly = {
	'@type': 'weekly',
	readonly daysOfWeek: DayOfWeek[];
	readonly interval: number;
	readonly endDate?: string;
	readonly timeZone: string;
};

export function isEventRepeatWeekly(value: unknown): value is EventRepeatWeekly {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('weekly')) &&
		checkProp(value, 'daysOfWeek', createTypedArrayGuard(isDayOfWeek)) &&
		checkProp(value, 'interval', isNumber) &&
		checkOptProp(value, 'endDate', isString) &&
		checkProp(value, 'timeZone', isString);
}

export function EventRepeatWeeklyFromJSON(value: Record<string, unknown>): EventRepeatWeekly {
	const daysOfWeek = propListValue('daysOfWeek', value, isDayOfWeek);
	const interval = propValue('interval', value, isNumber);
	const endDate = propValue('endDate', value, isString, 'optional');
	const timeZone = propValue('timeZone', value, isString);
	return {
		'@type': 'weekly',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

export function EventRepeatWeeklyToJSON(value: EventRepeatWeekly): Record<string, unknown> {
	const daysOfWeek = value.daysOfWeek;
	const interval = value.interval;
	const endDate = value.endDate;
	const timeZone = value.timeZone;

	return {
		'@type': 'weekly',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}


export type EventRepeatWeeklyPatch = {
	'@type': 'weekly-patch',
	readonly daysOfWeek?: DayOfWeek[];
	readonly interval?: number;
	readonly endDate?: (string | null);
	readonly timeZone?: string;
};

export function isEventRepeatWeeklyPatch(value: unknown): value is EventRepeatWeeklyPatch {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('weekly')) &&
		checkOptProp(value, 'daysOfWeek', createTypedArrayGuard(isDayOfWeek)) &&
		checkOptProp(value, 'interval', isNumber) &&
		(isNull(value.endDate) || checkOptProp(value, 'endDate', isString)) &&
		checkOptProp(value, 'timeZone', isString);
}

export function EventRepeatWeeklyPatchFromJSON(value: Record<string, unknown>): EventRepeatWeeklyPatch {
	const daysOfWeek = propListValue('daysOfWeek', value, isDayOfWeek, 'optional');
	const interval = propValue('interval', value, isNumber, 'optional');
	const endDate = propValue('endDate', value, isString, 'optional_null');
	const timeZone = propValue('timeZone', value, isString, 'optional');
	return {
		'@type': 'weekly-patch',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

export function EventRepeatWeeklyPatchToJSON(value: EventRepeatWeeklyPatch): Record<string, unknown> {
	const daysOfWeek = value.daysOfWeek;
	const interval = value.interval;
	const endDate = value.endDate;
	const timeZone = value.timeZone;

	return {
		'@type': 'weekly-patch',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

