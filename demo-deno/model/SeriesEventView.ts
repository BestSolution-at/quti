// Generated by RSD - Do not modify
import { checkProp, createIsStringTypeGuard, createTypedArrayGuard, isRecord, isString, propListValue, propValue } from '../_type-utils.ts';

type StatusEnum = 'ACCEPTED' | 'CANCELED';

export function isSeriesEventView_Status(value: unknown): value is StatusEnum {
	return value === 'ACCEPTED' || value === 'CANCELED';
}

export type SeriesEventView = {
	'@type': 'series',
	readonly masterEventKey: string;
	readonly key: string;
	readonly calendarKey: string;
	readonly title: string;
	readonly description: string;
	readonly owner: string;
	readonly status: StatusEnum;
	readonly start: string;
	readonly end: string;
	readonly tags: string[];
	readonly referencedCalendars: string[];
};

export function isSeriesEventView(value: unknown): value is SeriesEventView {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('series')) &&
		checkProp(value, 'masterEventKey', isString) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'calendarKey', isString) &&
		checkProp(value, 'title', isString) &&
		checkProp(value, 'description', isString) &&
		checkProp(value, 'owner', isString) &&
		checkProp(value, 'status', isSeriesEventView_Status) &&
		checkProp(value, 'start', isString) &&
		checkProp(value, 'end', isString) &&
		checkProp(value, 'tags', createTypedArrayGuard(isString)) &&
		checkProp(value, 'referencedCalendars', createTypedArrayGuard(isString));
}

export function SeriesEventViewFromJSON($value: Record<string, unknown>): SeriesEventView {
	const masterEventKey = propValue('masterEventKey', $value, isString);
	const key = propValue('key', $value, isString);
	const calendarKey = propValue('calendarKey', $value, isString);
	const title = propValue('title', $value, isString);
	const description = propValue('description', $value, isString);
	const owner = propValue('owner', $value, isString);
	const status = propValue('status', $value, isSeriesEventView_Status);
	const start = propValue('start', $value, isString);
	const end = propValue('end', $value, isString);
	const tags = propListValue('tags', $value, isString);
	const referencedCalendars = propListValue('referencedCalendars', $value, isString);
	return {
		'@type': 'series',
		masterEventKey,
		key,
		calendarKey,
		title,
		description,
		owner,
		status,
		start,
		end,
		tags,
		referencedCalendars,
	};
}

export function SeriesEventViewToJSON($value: SeriesEventView): Record<string, unknown> {
	const masterEventKey = $value.masterEventKey;
	const key = $value.key;
	const calendarKey = $value.calendarKey;
	const title = $value.title;
	const description = $value.description;
	const owner = $value.owner;
	const status = $value.status;
	const start = $value.start;
	const end = $value.end;
	const tags = $value.tags;
	const referencedCalendars = $value.referencedCalendars;

	return {
		'@type': 'series',
		masterEventKey,
		key,
		calendarKey,
		title,
		description,
		owner,
		status,
		start,
		end,
		tags,
		referencedCalendars,
	};
}

