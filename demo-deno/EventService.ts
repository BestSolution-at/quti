// Generated by RSD - Do not modify
import { EventNew } from './model/EventNew.ts';
import { Result } from './_type-utils.ts';
import { InvalidArgumentError, NotFoundError } from './Errors.ts';
import { Event } from './model/Event.ts';
import { EventSearch } from './model/EventSearch.ts';

export interface EventService {
	create(calendar: string, event: EventNew): Promise<Result<string, NotFoundError | InvalidArgumentError>>;
	get(calendar: string, key: string, timezone: string): Promise<Result<Event, NotFoundError | InvalidArgumentError>>;
	search(calendar: string, filter: EventSearch, timezone?: string): Promise<Result<Event[], InvalidArgumentError>>;
	update(calendar: string, key: string, changes: Event): Promise<Result<void, never>>;
	delete(calendar: string, key: string): Promise<Result<void, never>>;
	cancel(calendar: string, key: string): Promise<Result<void, never>>;
	uncancel(calendar: string, key: string): Promise<Result<void, never>>;
	move(calendar: string, key: string, start: string, end: string): Promise<Result<void, never>>;
	endRepeat(calendar: string, key: string, end: string): Promise<Result<void, never>>;
	description(calendar: string, key: string, description: string): Promise<Result<void, never>>;
}
