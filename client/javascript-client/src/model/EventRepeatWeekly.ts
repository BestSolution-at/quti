// Generated by RSD - Do not modify
import { type DayOfWeek, isDayOfWeek } from './DayOfWeek.js';
import { checkOptProp, checkProp, createIsStringTypeGuard, createReplaceAddRemoveGuard, createTypedArrayGuard, isNull, isNumber, isRecord, isString, type ListMergeAddRemove, ListMergeAddRemoveFromJSON, type ListReplace, noopMap, propListValue, propMappedValue, propValue } from '../_type-utils.js';

export type EventRepeatWeekly = {
	'@type': 'weekly',
	readonly daysOfWeek: DayOfWeek[];
	readonly interval: number;
	readonly endDate?: string;
	readonly timeZone: string;
};

export function isEventRepeatWeekly(value: unknown): value is EventRepeatWeekly {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('weekly')) &&
		checkProp(value, 'daysOfWeek', createTypedArrayGuard(isDayOfWeek)) &&
		checkProp(value, 'interval', isNumber) &&
		checkOptProp(value, 'endDate', isString) &&
		checkProp(value, 'timeZone', isString);
}

export function EventRepeatWeeklyFromJSON($value: Record<string, unknown>): EventRepeatWeekly {
	const daysOfWeek = propListValue('daysOfWeek', $value, isDayOfWeek);
	const interval = propValue('interval', $value, isNumber);
	const endDate = propValue('endDate', $value, isString, 'optional');
	const timeZone = propValue('timeZone', $value, isString);
	return {
		'@type': 'weekly',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

export function EventRepeatWeeklyToJSON($value: EventRepeatWeekly): Record<string, unknown> {
	const daysOfWeek = $value.daysOfWeek;
	const interval = $value.interval;
	const endDate = $value.endDate;
	const timeZone = $value.timeZone;

	return {
		'@type': 'weekly',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

type $DaysOfWeekReplace = ListReplace<DayOfWeek>;
type $DaysOfWeekMerge = ListMergeAddRemove<DayOfWeek, DayOfWeek>;
type $DaysOfWeekPatch = $DaysOfWeekReplace | $DaysOfWeekMerge;

export type EventRepeatWeeklyPatch = {
	'@type': 'weekly-patch',
	readonly daysOfWeek?: $DaysOfWeekPatch;
	readonly interval?: number;
	readonly endDate?: string | null;
	readonly timeZone?: string;
};

export function isEventRepeatWeeklyPatch(value: unknown): value is EventRepeatWeeklyPatch {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('weekly')) &&
		 &&
		checkOptProp(value, 'daysOfWeek', createReplaceAddRemoveGuard(isDayOfWeek)) &&
		checkOptProp(value, 'interval', isNumber) &&
		(checkOptProp(value, 'endDate', isNull) || checkOptProp(value, 'endDate', isString)) &&
		checkOptProp(value, 'timeZone', isString);
}

export function EventRepeatWeeklyPatchFromJSON($value: Record<string, unknown>): EventRepeatWeeklyPatch {
	const daysOfWeek = propMappedValue('daysOfWeek', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isDayOfWeek, noopMap, isDayOfWeek, noopMap), 'optional');
	const interval = propValue('interval', $value, isNumber, 'optional');
	const endDate = propValue('endDate', $value, isString, 'optional_null');
	const timeZone = propValue('timeZone', $value, isString, 'optional');
	return {
		'@type': 'weekly-patch',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

export function EventRepeatWeeklyPatchToJSON($value: EventRepeatWeeklyPatch): Record<string, unknown> {
	const daysOfWeek = $value.daysOfWeek;
	const interval = $value.interval;
	const endDate = $value.endDate;
	const timeZone = $value.timeZone;

	return {
		'@type': 'weekly-patch',
		daysOfWeek,
		interval,
		endDate,
		timeZone,
	};
}

