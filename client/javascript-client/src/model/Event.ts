// Generated by RSD - Do not modify
import {
	type EventRepeat,
	EventRepeatFromJSON,
	EventRepeatToJSON,
	isEventRepeat,
} from './EventRepeat.js';
import {
	checkOptProp,
	checkProp,
	createTypedArrayGuard,
	isBoolean,
	isListAddRemoveChange,
	isListSetElementsChange,
	isNull,
	isRecord,
	isString,
	isUndefined,
	ListAddRemoveChangeFromJSON,
	ListAddRemoveChangeToJSON,
	ListSetElementsChangeFromJSON,
	ListSetElementsChangeToJSON,
	noopMap,
	propListValue,
	propMappedValue,
	propValue,
	SetOrPatchChangeFromJSON,
	type ListAddRemoveChange,
	type ListSetElementsChange,
} from '../_type-utils.js';

export type Event = {
	readonly key: string;
	readonly title: string;
	readonly description?: string;
	readonly start: string;
	readonly end: string;
	readonly fullday?: boolean;
	readonly repeat?: EventRepeat;
	readonly tags: string[];
	readonly referencedCalendars: string[];
};

export function isEvent(value: unknown): value is Event {
	return (
		isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'title', isString) &&
		checkOptProp(value, 'description', isString) &&
		checkProp(value, 'start', isString) &&
		checkProp(value, 'end', isString) &&
		checkOptProp(value, 'fullday', isBoolean) &&
		checkOptProp(value, 'repeat', isEventRepeat) &&
		checkProp(value, 'tags', createTypedArrayGuard(isString)) &&
		checkProp(value, 'referencedCalendars', createTypedArrayGuard(isString))
	);
}

export function EventFromJSON(value: Record<string, unknown>): Event {
	const key = propValue('key', value, isString);
	const title = propValue('title', value, isString);
	const description = propValue('description', value, isString, 'optional');
	const start = propValue('start', value, isString);
	const end = propValue('end', value, isString);
	const fullday = propValue('fullday', value, isBoolean, 'optional');
	const repeat = propMappedValue(
		'repeat',
		value,
		isRecord,
		EventRepeatFromJSON,
		'optional',
	);
	const tags = propListValue('tags', value, isString);
	const referencedCalendars = propListValue(
		'referencedCalendars',
		value,
		isString,
	);
	return {
		key,
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

export function EventToJSON(value: Event): Record<string, unknown> {
	const key = value.key;
	const title = value.title;
	const description = value.description;
	const start = value.start;
	const end = value.end;
	const fullday = value.fullday;
	const repeat = isUndefined(value.repeat)
		? undefined
		: EventRepeatToJSON(value.repeat);
	const tags = value.tags;
	const referencedCalendars = value.referencedCalendars;

	return {
		key,
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

export type EventPatch_ReferencedCalendars_SetChange =
	ListSetElementsChange<string>;
export type EventPatch_ReferencedCalendars_PatchChange = ListAddRemoveChange<
	string,
	string
>;
export type EventPatch_ReferencedCalendars_Change =
	| EventPatch_ReferencedCalendars_SetChange
	| EventPatch_ReferencedCalendars_PatchChange;

export type EventPatch = {
	readonly title?: string;
	readonly description?: string | null;
	readonly start?: string;
	readonly end?: string;
	readonly fullday?: boolean | null;
	readonly repeat?: EventRepeat | null;
	readonly tags?: string[];
	readonly referencedCalendars?: EventPatch_ReferencedCalendars_Change;
};

export function isEventPatch(value: unknown): value is EventPatch {
	return (
		isRecord(value) &&
		checkOptProp(value, 'title', isString) &&
		(isNull(value.description) ||
			checkOptProp(value, 'description', isString)) &&
		checkOptProp(value, 'start', isString) &&
		checkOptProp(value, 'end', isString) &&
		(isNull(value.fullday) || checkOptProp(value, 'fullday', isBoolean)) &&
		(isNull(value.repeat) || checkOptProp(value, 'repeat', isEventRepeat)) &&
		checkOptProp(value, 'tags', createTypedArrayGuard(isString)) &&
		checkOptProp(value, 'referencedCalendars', createTypedArrayGuard(isString))
	);
}

export function EventPatchFromJSON(value: Record<string, unknown>): EventPatch {
	const title = propValue('title', value, isString, 'optional');
	const description = propValue(
		'description',
		value,
		isString,
		'optional_null',
	);
	const start = propValue('start', value, isString, 'optional');
	const end = propValue('end', value, isString, 'optional');
	const fullday = propValue('fullday', value, isBoolean, 'optional_null');
	const repeat = propMappedValue(
		'repeat',
		value,
		isRecord,
		EventRepeatFromJSON,
		'optional_null',
	);
	const tags = propListValue('tags', value, isString, 'optional');
	const referencedCalendars = propMappedValue(
		'referencedCalendars',
		value,
		isRecord,
		EventPatch_ReferencedCalendars_ChangeFromJSON,
		'optional',
	);
	return {
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}

export function isEventPatch_ReferencedCalendars_SetChange(
	value: unknown,
): value is EventPatch_ReferencedCalendars_SetChange {
	return isListSetElementsChange(value, isString);
}

export function isEventPatch_ReferencedCalendars_PatchChange(
	value: Record<string, unknown>,
): value is EventPatch_ReferencedCalendars_PatchChange {
	return isListAddRemoveChange(value, isString, isString);
}

export function isEventPatch_ReferencedCalendars_Change(
	value: Record<string, unknown>,
): value is EventPatch_ReferencedCalendars_Change {
	return (
		isEventPatch_ReferencedCalendars_SetChange(value) ||
		isEventPatch_ReferencedCalendars_PatchChange(value)
	);
}

function EventPatch_ReferencedCalendars_SetChangeFromJSON(
	value: Record<string, unknown>,
): EventPatch_ReferencedCalendars_SetChange {
	return ListSetElementsChangeFromJSON(value, isString, (v) => v);
}

function EventPatch_ReferencedCalendars_SetChangeToJSON(
	value: EventPatch_ReferencedCalendars_SetChange,
) {
	return ListSetElementsChangeToJSON(value, noopMap);
}

function EventPatch_ReferencedCalendars_PatchChangeFromJSON(
	value: Record<string, unknown>,
): EventPatch_ReferencedCalendars_PatchChange {
	return ListAddRemoveChangeFromJSON(
		value,
		isString,
		noopMap,
		isString,
		noopMap,
	);
}

function EventPatch_ReferencedCalendars_PatchChangeToJSON(
	value: EventPatch_ReferencedCalendars_PatchChange,
) {
	return ListAddRemoveChangeToJSON(value, noopMap, noopMap);
}

function EventPatch_ReferencedCalendars_ChangeFromJSON(
	value: Record<string, unknown>,
): EventPatch_ReferencedCalendars_Change {
	return SetOrPatchChangeFromJSON(
		value,
		EventPatch_ReferencedCalendars_SetChangeFromJSON,
		EventPatch_ReferencedCalendars_PatchChangeFromJSON,
	);
}

function EventPatch_ReferencedCalendars_ChangeToJSON(
	value: EventPatch_ReferencedCalendars_Change,
) {
	if (isEventPatch_ReferencedCalendars_SetChange(value)) {
		return EventPatch_ReferencedCalendars_SetChangeToJSON(value);
	}
	return EventPatch_ReferencedCalendars_PatchChangeToJSON(value);
}

export function EventPatchToJSON(value: EventPatch): Record<string, unknown> {
	const title = value.title;
	const description = value.description;
	const start = value.start;
	const end = value.end;
	const fullday = value.fullday;
	const repeat =
		isUndefined(value.repeat) || isNull(value.repeat)
			? value.repeat
			: EventRepeatToJSON(value.repeat);
	const tags = value.tags;
	const referencedCalendars = isUndefined(value.referencedCalendars)
		? value.referencedCalendars
		: EventPatch_ReferencedCalendars_ChangeToJSON(value.referencedCalendars);

	return {
		title,
		description,
		start,
		end,
		fullday,
		repeat,
		tags,
		referencedCalendars,
	};
}
