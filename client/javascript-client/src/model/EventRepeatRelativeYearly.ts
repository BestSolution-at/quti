// Generated by RSD - Do not modify
import { type DayOfWeek, isDayOfWeek } from './DayOfWeek.js';
import { isMonth, type Month } from './Month.js';
import {
	checkOptProp,
	checkProp,
	createIsStringTypeGuard,
	createTypedArrayGuard,
	isNull,
	isNumber,
	isRecord,
	isString,
	propListValue,
	propValue,
} from '../_type-utils.js';

export type EventRepeatRelativeYearly = {
	'@type': 'relative-yearly';
	readonly daysOfWeek: DayOfWeek[];
	readonly month: Month;
	readonly interval: number;
	readonly endDate?: string;
	readonly timeZone: string;
};

export function isEventRepeatRelativeYearly(
	value: unknown,
): value is EventRepeatRelativeYearly {
	return (
		isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('relative-yearly')) &&
		checkProp(value, 'daysOfWeek', createTypedArrayGuard(isDayOfWeek)) &&
		checkProp(value, 'month', isMonth) &&
		checkProp(value, 'interval', isNumber) &&
		checkOptProp(value, 'endDate', isString) &&
		checkProp(value, 'timeZone', isString)
	);
}

export function EventRepeatRelativeYearlyFromJSON(
	value: Record<string, unknown>,
): EventRepeatRelativeYearly {
	const daysOfWeek = propListValue('daysOfWeek', value, isDayOfWeek);
	const month = propValue('month', value, isMonth);
	const interval = propValue('interval', value, isNumber);
	const endDate = propValue('endDate', value, isString, 'optional');
	const timeZone = propValue('timeZone', value, isString);
	return {
		'@type': 'relative-yearly',
		daysOfWeek,
		month,
		interval,
		endDate,
		timeZone,
	};
}

export function EventRepeatRelativeYearlyToJSON(
	value: EventRepeatRelativeYearly,
): Record<string, unknown> {
	const daysOfWeek = value.daysOfWeek;
	const month = value.month;
	const interval = value.interval;
	const endDate = value.endDate;
	const timeZone = value.timeZone;

	return {
		'@type': 'relative-yearly',
		daysOfWeek,
		month,
		interval,
		endDate,
		timeZone,
	};
}

export type EventRepeatRelativeYearlyPatch = {
	'@type': 'patch:relative-yearly';
	readonly daysOfWeek?: DayOfWeek[];
	readonly month?: Month;
	readonly interval?: number;
	readonly endDate?: string | null;
	readonly timeZone?: string;
};

export function isEventRepeatRelativeYearlyPatch(
	value: unknown,
): value is EventRepeatRelativeYearlyPatch {
	return (
		isRecord(value) &&
		checkProp(
			value,
			'@type',
			createIsStringTypeGuard('patch:relative-yearly'),
		) &&
		checkOptProp(value, 'daysOfWeek', createTypedArrayGuard(isDayOfWeek)) &&
		checkOptProp(value, 'month', isMonth) &&
		checkOptProp(value, 'interval', isNumber) &&
		(isNull(value.endDate) || checkOptProp(value, 'endDate', isString)) &&
		checkOptProp(value, 'timeZone', isString)
	);
}

export function EventRepeatRelativeYearlyPatchFromJSON(
	value: Record<string, unknown>,
): EventRepeatRelativeYearlyPatch {
	const daysOfWeek = propListValue(
		'daysOfWeek',
		value,
		isDayOfWeek,
		'optional',
	);
	const month = propValue('month', value, isMonth, 'optional');
	const interval = propValue('interval', value, isNumber, 'optional');
	const endDate = propValue('endDate', value, isString, 'optional_null');
	const timeZone = propValue('timeZone', value, isString, 'optional');
	return {
		'@type': 'patch:relative-yearly',
		daysOfWeek,
		month,
		interval,
		endDate,
		timeZone,
	};
}

export function EventRepeatRelativeYearlyPatchToJSON(
	value: EventRepeatRelativeYearlyPatch,
): Record<string, unknown> {
	const daysOfWeek = value.daysOfWeek;
	const month = value.month;
	const interval = value.interval;
	const endDate = value.endDate;
	const timeZone = value.timeZone;

	return {
		'@type': 'patch:relative-yearly',
		daysOfWeek,
		month,
		interval,
		endDate,
		timeZone,
	};
}
