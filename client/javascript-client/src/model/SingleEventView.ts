// Generated by RSD - Do not modify
import {
	checkProp,
	createIsStringTypeGuard,
	createTypedArrayGuard,
	isRecord,
	isString,
	propListValue,
	propValue,
} from '../_type-utils.js';

export type SingleEventView = {
	'@type': 'single';
	readonly key: string;
	readonly calendarKey: string;
	readonly title: string;
	readonly description: string;
	readonly owner: string;
	readonly status: 'ACCEPTED' | 'CANCELED';
	readonly start: string;
	readonly end: string;
	readonly tags: string[];
	readonly referencedCalendars: string[];
};

export function isSingleEventView(value: unknown): value is SingleEventView {
	return (
		isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('single')) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'calendarKey', isString) &&
		checkProp(value, 'title', isString) &&
		checkProp(value, 'description', isString) &&
		checkProp(value, 'owner', isString) &&
		checkProp(value, 'status', isSingleEventView_Status) &&
		checkProp(value, 'start', isString) &&
		checkProp(value, 'end', isString) &&
		checkProp(value, 'tags', createTypedArrayGuard(isString)) &&
		checkProp(value, 'referencedCalendars', createTypedArrayGuard(isString))
	);
}

export function SingleEventViewFromJSON(
	value: Record<string, unknown>,
): SingleEventView {
	const key = propValue('key', value, isString);
	const calendarKey = propValue('calendarKey', value, isString);
	const title = propValue('title', value, isString);
	const description = propValue('description', value, isString);
	const owner = propValue('owner', value, isString);
	const status = propValue('status', value, isSingleEventView_Status);
	const start = propValue('start', value, isString);
	const end = propValue('end', value, isString);
	const tags = propListValue('tags', value, isString);
	const referencedCalendars = propListValue(
		'referencedCalendars',
		value,
		isString,
	);
	return {
		'@type': 'single',
		key,
		calendarKey,
		title,
		description,
		owner,
		status,
		start,
		end,
		tags,
		referencedCalendars,
	};
}

export function SingleEventViewToJSON(
	value: SingleEventView,
): Record<string, unknown> {
	const key = value.key;
	const calendarKey = value.calendarKey;
	const title = value.title;
	const description = value.description;
	const owner = value.owner;
	const status = value.status;
	const start = value.start;
	const end = value.end;
	const tags = value.tags;
	const referencedCalendars = value.referencedCalendars;

	return {
		'@type': 'single',
		key,
		calendarKey,
		title,
		description,
		owner,
		status,
		start,
		end,
		tags,
		referencedCalendars,
	};
}

export function isSingleEventView_Status(value: unknown) {
	return value === 'ACCEPTED' || value === 'CANCELED';
}
