// Generated by RSD - Do not modify
import { type DateTimeRange, DateTimeRangeFromJSON, DateTimeRangeToJSON, isDateTimeRange } from './DateTimeRange.js';
import { checkOptProp, createTypedArrayGuard, isRecord, isString, isUndefined, propListValue, propMappedValue } from '../_type-utils.js';

export type EventSearch = {
	readonly tags?: string[];
	readonly startRange?: DateTimeRange;
	readonly endRange?: DateTimeRange;
};

export function isEventSearch(value: unknown): value is EventSearch {
	return isRecord(value) &&
		checkOptProp(value, 'tags', createTypedArrayGuard(isString)) &&
		checkOptProp(value, 'startRange', isDateTimeRange) &&
		checkOptProp(value, 'endRange', isDateTimeRange);
}

export function EventSearchFromJSON(value: Record<string, unknown>): EventSearch {
	const tags = propListValue('tags', value, isString, 'optional');
	const startRange = propMappedValue('startRange', value, isRecord, DateTimeRangeFromJSON, 'optional');
	const endRange = propMappedValue('endRange', value, isRecord, DateTimeRangeFromJSON, 'optional');
	return {
		tags,
		startRange,
		endRange,
	};
}

export function EventSearchToJSON(value: EventSearch): Record<string, unknown> {
	const tags = value.tags;
	const startRange = isUndefined(value.startRange) ? undefined : DateTimeRangeToJSON(value.startRange);
	const endRange = isUndefined(value.endRange) ? undefined : DateTimeRangeToJSON(value.endRange);

	return {
		tags,
		startRange,
		endRange,
	};
}

