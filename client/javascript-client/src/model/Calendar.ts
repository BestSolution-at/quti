// Generated by RSD - Do not modify
import {
	checkOptProp,
	checkProp,
	isNull,
	isRecord,
	isString,
	propValue,
} from '../_type-utils.js';

export type Calendar = {
	readonly key: string;
	readonly name: string;
	readonly owner?: string;
};

export function isCalendar(value: unknown): value is Calendar {
	return (
		isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'name', isString) &&
		checkOptProp(value, 'owner', isString)
	);
}

export function CalendarFromJSON(value: Record<string, unknown>): Calendar {
	const key = propValue('key', value, isString);
	const name = propValue('name', value, isString);
	const owner = propValue('owner', value, isString, 'optional');
	return {
		key,
		name,
		owner,
	};
}

export function CalendarToJSON(value: Calendar): Record<string, unknown> {
	const key = value.key;
	const name = value.name;
	const owner = value.owner;

	return {
		key,
		name,
		owner,
	};
}

export type CalendarPatch = {
	readonly name?: string;
	readonly owner?: string | null;
};

export function isCalendarPatch(value: unknown): value is CalendarPatch {
	return (
		isRecord(value) &&
		checkOptProp(value, 'name', isString) &&
		(isNull(value.owner) || checkOptProp(value, 'owner', isString))
	);
}

export function CalendarPatchFromJSON(
	value: Record<string, unknown>,
): CalendarPatch {
	const name = propValue('name', value, isString, 'optional');
	const owner = propValue('owner', value, isString, 'optional_null');
	return {
		name,
		owner,
	};
}

export function CalendarPatchToJSON(
	value: CalendarPatch,
): Record<string, unknown> {
	const name = value.name;
	const owner = value.owner;

	return {
		name,
		owner,
	};
}
