// Generated by RSD - Do not modify
import type { EventNew } from './model/EventNew.js';
import type { Result, VoidType } from './_result-utils.js';
import type {
	InvalidArgumentError,
	NativeRSDError,
	NotFoundError,
	StatusRSDError,
} from './Errors.js';
import type { Event, EventPatch } from './model/Event.js';
import type { EventSearch } from './model/EventSearch.js';

export interface EventService {
	create(
		calendar: string,
		event: EventNew,
	): Promise<
		Result<
			string,
			NotFoundError | InvalidArgumentError | StatusRSDError | NativeRSDError
		>
	>;
	get(
		calendar: string,
		key: string,
		timezone: string,
	): Promise<
		Result<
			Event,
			NotFoundError | InvalidArgumentError | StatusRSDError | NativeRSDError
		>
	>;
	search(
		calendar: string,
		filter: EventSearch,
		timezone?: string,
	): Promise<
		Result<Event[], InvalidArgumentError | StatusRSDError | NativeRSDError>
	>;
	update(
		calendar: string,
		key: string,
		changes: EventPatch,
	): Promise<
		Result<
			VoidType,
			NotFoundError | InvalidArgumentError | StatusRSDError | NativeRSDError
		>
	>;
	delete(
		calendar: string,
		key: string,
	): Promise<Result<VoidType, StatusRSDError | NativeRSDError>>;
	cancel(
		calendar: string,
		key: string,
	): Promise<Result<VoidType, StatusRSDError | NativeRSDError>>;
	uncancel(
		calendar: string,
		key: string,
	): Promise<Result<VoidType, StatusRSDError | NativeRSDError>>;
	move(
		calendar: string,
		key: string,
		start: string,
		end: string,
	): Promise<Result<VoidType, StatusRSDError | NativeRSDError>>;
	endRepeat(
		calendar: string,
		key: string,
		end: string,
	): Promise<Result<VoidType, StatusRSDError | NativeRSDError>>;
	description(
		calendar: string,
		key: string,
		description: string,
	): Promise<Result<VoidType, StatusRSDError | NativeRSDError>>;
}
