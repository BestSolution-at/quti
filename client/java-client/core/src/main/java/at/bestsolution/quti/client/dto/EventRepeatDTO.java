// Generated by RSD - Do not modify
package at.bestsolution.quti.client.dto;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.List;

public interface EventRepeatDTO extends BaseDTO {
    /**
     * Repeat interval
     */
    public short interval();
    /**
     * End date of the repeat
     */
    public LocalDate endDate();
    /**
     * Timezone in which the event repeats
     */
    public ZoneId timeZone();

    public interface Builder extends BaseDTO.Builder {
        public Builder interval(short interval);
        public Builder endDate(LocalDate endDate);
        public Builder timeZone(ZoneId timeZone);
        public EventRepeatDTO build();
    }

    public interface EventRepeatDailyDTO extends EventRepeatDTO {

        public interface Builder extends EventRepeatDTO.Builder {
            public Builder interval(short interval);
            public Builder endDate(LocalDate endDate);
            public Builder timeZone(ZoneId timeZone);
            public EventRepeatDailyDTO build();
        }
    }

    public interface EventRepeatWeeklyDTO extends EventRepeatDTO {
        /**
         * the days in a week the event repeats
         */
        public List<DayOfWeek> daysOfWeek();

        public interface Builder extends EventRepeatDTO.Builder {
            public Builder daysOfWeek(List<DayOfWeek> daysOfWeek);
            public Builder interval(short interval);
            public Builder endDate(LocalDate endDate);
            public Builder timeZone(ZoneId timeZone);
            public EventRepeatWeeklyDTO build();
        }
    }

    public interface EventRepeatAbsoluteMonthlyDTO extends EventRepeatDTO {
        /**
         * the day of the month the event repeats
         */
        public short dayOfMonth();

        public interface Builder extends EventRepeatDTO.Builder {
            public Builder dayOfMonth(short dayOfMonth);
            public Builder interval(short interval);
            public Builder endDate(LocalDate endDate);
            public Builder timeZone(ZoneId timeZone);
            public EventRepeatAbsoluteMonthlyDTO build();
        }
    }

    public interface EventRepeatAbsoluteYearlyDTO extends EventRepeatDTO {
        /**
         * the day of the month the event repeats
         */
        public short dayOfMonth();
        /**
         * the month of the year the event repeats
         */
        public Month month();

        public interface Builder extends EventRepeatDTO.Builder {
            public Builder dayOfMonth(short dayOfMonth);
            public Builder month(Month month);
            public Builder interval(short interval);
            public Builder endDate(LocalDate endDate);
            public Builder timeZone(ZoneId timeZone);
            public EventRepeatAbsoluteYearlyDTO build();
        }
    }

    public interface EventRepeatRelativeMonthlyDTO extends EventRepeatDTO {
        /**
         * selects the first day in a month
         */
        public List<DayOfWeek> daysOfWeek();

        public interface Builder extends EventRepeatDTO.Builder {
            public Builder daysOfWeek(List<DayOfWeek> daysOfWeek);
            public Builder interval(short interval);
            public Builder endDate(LocalDate endDate);
            public Builder timeZone(ZoneId timeZone);
            public EventRepeatRelativeMonthlyDTO build();
        }
    }

    public interface EventRepeatRelativeYearlyDTO extends EventRepeatDTO {
        /**
         * selects the first day in a month
         */
        public List<DayOfWeek> daysOfWeek();
        /**
         * the month in a year
         */
        public Month month();

        public interface Builder extends EventRepeatDTO.Builder {
            public Builder daysOfWeek(List<DayOfWeek> daysOfWeek);
            public Builder month(Month month);
            public Builder interval(short interval);
            public Builder endDate(LocalDate endDate);
            public Builder timeZone(ZoneId timeZone);
            public EventRepeatRelativeYearlyDTO build();
        }
    }
}
