// Generated by RSD - Do not modify
package at.bestsolution.quti.client.jdkhttp.impl.dto;

import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.List;

import jakarta.json.Json;
import jakarta.json.JsonArray;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import at.bestsolution.quti.client.dto.EventRepeatAbsoluteYearlyDTO;

public class EventRepeatAbsoluteYearlyDTOImpl extends BaseDTOImpl implements EventRepeatAbsoluteYearlyDTO {

    EventRepeatAbsoluteYearlyDTOImpl(JsonObject data) {
        super(data);
    }

    @Override
    public short dayOfMonth() {
        return DTOUtils.mapShort(data, "dayOfMonth");
    }

    @Override
    public Month month() {
        return DTOUtils.mapLiteral(data, "month", Month::valueOf);
    }

    @Override
    public short interval() {
        return DTOUtils.mapShort(data, "interval");
    }

    @Override
    public LocalDate endDate() {
        return DTOUtils.mapLocalDate(data, "endDate", null);
    }

    @Override
    public ZoneId timeZone() {
        return DTOUtils.mapLiteral(data, "timeZone", ZoneId::of);
    }

    public static EventRepeatAbsoluteYearlyDTO of(JsonObject data) {
        return new EventRepeatAbsoluteYearlyDTOImpl(data);
    }

    public static List<EventRepeatAbsoluteYearlyDTO> of(JsonArray data) {
        return DTOUtils.mapObjects(data, EventRepeatAbsoluteYearlyDTOImpl::of);
    }

    public static class BuilderImpl implements Builder {
        private JsonObjectBuilder $builder = Json.createObjectBuilder();
        public BuilderImpl() {
            $builder.add("@type", "absolute-yearly");
        }
        @Override
        public Builder dayOfMonth(short dayOfMonth) {
            $builder.add("dayOfMonth", dayOfMonth);
            return this;
        }

        @Override
        public Builder month(Month month) {
            $builder.add("month", month.toString());
            return this;
        }

        @Override
        public Builder interval(short interval) {
            $builder.add("interval", interval);
            return this;
        }

        @Override
        public Builder endDate(LocalDate endDate) {
            if( endDate == null ) {
                return this;
            }
            $builder.add("endDate", endDate.toString());
            return this;
        }

        @Override
        public Builder timeZone(ZoneId timeZone) {
            $builder.add("timeZone", timeZone.toString());
            return this;
        }

        public EventRepeatAbsoluteYearlyDTO build() {
            return new EventRepeatAbsoluteYearlyDTOImpl($builder.build());
        }
    }
}
