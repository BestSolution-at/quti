// Generated by RSD - Do not modify
package at.bestsolution.quti.client.jdkhttp.impl;

import java.io.IOException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;
import java.net.URI;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.util.Objects;

import jakarta.json.Json;

import at.bestsolution.quti.client.dto.EventNewDTO;
import at.bestsolution.quti.client.EventService;
import at.bestsolution.quti.client.InvalidArgumentException;
import at.bestsolution.quti.client.jdkhttp.impl.dto.DTOUtils;
import at.bestsolution.quti.client.NotFoundException;

public class EventServiceImpl implements EventService {
    private final String baseURI;
    private final HttpClient client;

    public EventServiceImpl(HttpClient client, String baseURI) {
        this.baseURI = baseURI;
        this.client = client;
    }

    public String create(String calendar, EventNewDTO event)
        throws NotFoundException,
            InvalidArgumentException {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(event, "event must not be null");

        var $path = "%s/api/calendar/%s/events/".formatted(
            this.baseURI,
            calendar
        );

        var $body = BodyPublishers.ofString(DTOUtils.toJsonString(event, false));

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .header("Content-Type", "application/json")
                .POST($body)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 201 ) {
                return ServiceUtils.mapString($response);
            } else if ($response.statusCode() == 404 ) {
                throw new NotFoundException(ServiceUtils.mapString($response), null);
            } else if ($response.statusCode() == 400 ) {
                throw new InvalidArgumentException(ServiceUtils.mapString($response), null);
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public void delete(String calendar, String key) {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(key, "key must not be null");

        var $path = "%s/api/calendar/%s/events/%s".formatted(
            this.baseURI,
            calendar,
            key
        );

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .DELETE()
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 204) {
                return;
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public void cancel(String calendar, String key) {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(key, "key must not be null");

        var $path = "%s/api/calendar/%s/events/%s/action/cancel".formatted(
            this.baseURI,
            calendar,
            key
        );

        var $body = BodyPublishers.ofString("");

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .header("Content-Type", "application/json")
                .PUT($body)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 204) {
                return;
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public void uncancel(String calendar, String key) {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(key, "key must not be null");

        var $path = "%s/api/calendar/%s/events/%s/action/uncancel".formatted(
            this.baseURI,
            calendar,
            key
        );

        var $body = BodyPublishers.ofString("");

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .header("Content-Type", "application/json")
                .PUT($body)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 204) {
                return;
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public void move(String calendar, String key, ZonedDateTime start, ZonedDateTime end) {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(key, "key must not be null");
        Objects.requireNonNull(start, "start must not be null");
        Objects.requireNonNull(end, "end must not be null");

        var $path = "%s/api/calendar/%s/events/%s/action/move".formatted(
            this.baseURI,
            calendar,
            key
        );

        var $builder = Json.createObjectBuilder();
        $builder = $builder.add("start", start.toString());
        $builder = $builder.add("end", end.toString());
        var $body = BodyPublishers.ofString(DTOUtils.toJsonString($builder.build(),false));

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .header("Content-Type", "application/json")
                .PUT($body)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 204) {
                return;
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public void endRepeat(String calendar, String key, LocalDate end) {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(key, "key must not be null");
        Objects.requireNonNull(end, "end must not be null");

        var $path = "%s/api/calendar/%s/events/%s/action/end-repeat".formatted(
            this.baseURI,
            calendar,
            key
        );

        var $body = BodyPublishers.ofString(end.toString());

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .header("Content-Type", "application/json")
                .PUT($body)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 204) {
                return;
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public void description(String calendar, String key, String description) {
        Objects.requireNonNull(calendar, "calendar must not be null");
        Objects.requireNonNull(key, "key must not be null");
        Objects.requireNonNull(description, "description must not be null");

        var $path = "%s/api/calendar/%s/events/".formatted(
            this.baseURI,
            calendar
        );

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 204) {
                return;
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }
}
