// Generated by RSD - Do not modify
package at.bestsolution.quti.client.jdkhttp.impl.dto;

import java.time.ZonedDateTime;
import java.util.function.Function;
import java.util.List;

import jakarta.json.Json;
import jakarta.json.JsonArray;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import at.bestsolution.quti.client.dto.EventDTO;
import at.bestsolution.quti.client.dto.EventRepeatDTO;

public class EventDTOImpl extends BaseDTOImpl implements EventDTO {

    EventDTOImpl(JsonObject data) {
        super(data);
    }

    @Override
    public String key() {
        return DTOUtils.mapString(data, "key");
    }

    @Override
    public String title() {
        return DTOUtils.mapString(data, "title");
    }

    @Override
    public String description() {
        return DTOUtils.mapString(data, "description", null);
    }

    @Override
    public ZonedDateTime start() {
        return DTOUtils.mapZonedDateTime(data, "start");
    }

    @Override
    public ZonedDateTime end() {
        return DTOUtils.mapZonedDateTime(data, "end");
    }

    @Override
    public boolean fullday() {
        return DTOUtils.mapBoolean(data, "fullday");
    }

    @Override
    public EventRepeatDTO repeat() {
        return DTOUtils.mapObject(data, "repeat", EventRepeatDTOImpl::of, null);
    }

    @Override
    public List<String> tags() {
        return DTOUtils.mapStrings(data, "tags");
    }

    @Override
    public List<String> referencedCalendars() {
        return DTOUtils.mapStrings(data, "referencedCalendars");
    }

    public static EventDTO of(JsonObject data) {
        return new EventDTOImpl(data);
    }

    public static List<EventDTO> of(JsonArray data) {
        return DTOUtils.mapObjects(data, EventDTOImpl::of);
    }

    @Override
    public String toString() {
        return "%s[%s=%s]".formatted(getClass().getSimpleName(), "key", key());
    }

    public static class BuilderImpl implements Builder {
        private JsonObjectBuilder $builder = Json.createObjectBuilder();

        @Override
        public Builder key(String key) {
            $builder.add("key", key);
            return this;
        }

        @Override
        public Builder title(String title) {
            $builder.add("title", title);
            return this;
        }

        @Override
        public Builder description(String description) {
            $builder.add("description", description);
            return this;
        }

        @Override
        public Builder start(ZonedDateTime start) {
            $builder.add("start", start.toString());
            return this;
        }

        @Override
        public Builder end(ZonedDateTime end) {
            $builder.add("end", end.toString());
            return this;
        }

        @Override
        public Builder fullday(boolean fullday) {
            $builder.add("fullday", fullday);
            return this;
        }

        @Override
        public Builder repeat(EventRepeatDTO repeat) {
            $builder.add("repeat", ((BaseDTOImpl)repeat).data);
            return this;
        }

        @Override
        public Builder tags(List<String> tags) {
            $builder.add("tags", DTOUtils.toJsonStringArray(tags));
            return this;
        }

        @Override
        public Builder referencedCalendars(List<String> referencedCalendars) {
            $builder.add("referencedCalendars", DTOUtils.toJsonStringArray(referencedCalendars));
            return this;
        }

        public <T extends EventRepeatDTO.Builder> Builder withRepeat(Class<T> clazz, Function<T, EventRepeatDTO> block) {
            EventRepeatDTOImpl.Builder b = null;
            if( clazz == EventRepeatDTO.EventRepeatDailyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatDailyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatWeeklyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatWeeklyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatAbsoluteMonthlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatAbsoluteMonthlyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatAbsoluteYearlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatAbsoluteYearlyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatRelativeMonthlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatRelativeMonthlyDTOImpl.BuilderImpl();
            } else if( clazz == EventRepeatDTO.EventRepeatRelativeYearlyDTO.Builder.class ) {
                b = new EventRepeatDTOImpl.EventRepeatRelativeYearlyDTOImpl.BuilderImpl();
            } else {
                throw new IllegalArgumentException();
            }
            $builder.add("repeat", ((EventRepeatDTOImpl)block.apply((T) b)).data);
            return this;
        }

        public EventDTO build() {
            return new EventDTOImpl($builder.build());
        }
    }
}
