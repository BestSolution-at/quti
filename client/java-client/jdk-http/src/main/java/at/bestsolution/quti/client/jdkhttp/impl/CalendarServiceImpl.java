// Generated by RSD - Do not modify
package at.bestsolution.quti.client.jdkhttp.impl;

import java.io.IOException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;
import java.net.URI;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import at.bestsolution.quti.client.CalendarService;
import at.bestsolution.quti.client.dto.CalendarDTO;
import at.bestsolution.quti.client.dto.CalendarNewDTO;
import at.bestsolution.quti.client.dto.EventViewDTO;
import at.bestsolution.quti.client.InvalidArgumentException;
import at.bestsolution.quti.client.InvalidContentException;
import at.bestsolution.quti.client.jdkhttp.impl.dto.CalendarDTOImpl;
import at.bestsolution.quti.client.jdkhttp.impl.dto.DTOUtils;
import at.bestsolution.quti.client.jdkhttp.impl.dto.EventViewDTOImpl;
import at.bestsolution.quti.client.NotFoundException;

public class CalendarServiceImpl implements CalendarService {
    private final String baseURI;
    private final HttpClient client;

    public CalendarServiceImpl(HttpClient client, String baseURI) {
        this.baseURI = baseURI;
        this.client = client;
    }

    public String create(CalendarNewDTO calendar)
        throws InvalidContentException {
        Objects.requireNonNull(calendar, "calendar must not be null");

        var $path = "%s/api/calendar/".formatted(
            this.baseURI
        );

        var $body = BodyPublishers.ofString(DTOUtils.toJsonString(calendar, false));

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .header("Content-Type", "application/json")
                .POST($body)
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 201 ) {
                return ServiceUtils.mapString($response);
            } else if ($response.statusCode() == 422 ) {
                throw new InvalidContentException(ServiceUtils.mapString($response), null);
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public CalendarDTO get(String key)
        throws NotFoundException,
            InvalidArgumentException {
        Objects.requireNonNull(key, "key must not be null");

        var $path = "%s/api/calendar/%s".formatted(
            this.baseURI,
            key
        );

        var $uri = URI.create($path);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .GET()
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 200 ) {
                return ServiceUtils.mapObject($response, CalendarDTOImpl::of);
            } else if ($response.statusCode() == 404 ) {
                throw new NotFoundException(ServiceUtils.mapString($response), null);
            } else if ($response.statusCode() == 400 ) {
                throw new InvalidArgumentException(ServiceUtils.mapString($response), null);
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public List<EventViewDTO> eventView(String key, LocalDate start, LocalDate end, ZoneId timezone)
        throws NotFoundException,
            InvalidArgumentException {
        Objects.requireNonNull(key, "key must not be null");
        Objects.requireNonNull(start, "start must not be null");
        Objects.requireNonNull(end, "end must not be null");
        Objects.requireNonNull(timezone, "timezone must not be null");

        var $path = "%s/api/calendar/%s/view".formatted(
            this.baseURI,
            key
        );

        var $queryParams = Map.of(
            "from",ServiceUtils.toQueryString(start),
            "to",ServiceUtils.toQueryString(end),
            "timezone",ServiceUtils.toQueryString(timezone)
        );
        var $queryParamString = ServiceUtils.toURLQueryPart($queryParams);

        var $uri = URI.create($path + $queryParamString);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .GET()
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 200 ) {
                return ServiceUtils.mapObjects($response, EventViewDTOImpl::of);
            } else if ($response.statusCode() == 404 ) {
                throw new NotFoundException(ServiceUtils.mapString($response), null);
            } else if ($response.statusCode() == 400 ) {
                throw new InvalidArgumentException(ServiceUtils.mapString($response), null);
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    public List<EventViewDTO> eventView(String key, LocalDate start, LocalDate end, ZoneId timezone, ZoneId resultTimeZone)
        throws NotFoundException,
            InvalidArgumentException {
        Objects.requireNonNull(key, "key must not be null");
        Objects.requireNonNull(start, "start must not be null");
        Objects.requireNonNull(end, "end must not be null");
        Objects.requireNonNull(timezone, "timezone must not be null");
        Objects.requireNonNull(resultTimeZone, "resultTimeZone must not be null");

        var $path = "%s/api/calendar/%s/view".formatted(
            this.baseURI,
            key
        );

        var $queryParams = Map.of(
            "from",ServiceUtils.toQueryString(start),
            "to",ServiceUtils.toQueryString(end),
            "timezone",ServiceUtils.toQueryString(timezone)
        );
        var $queryParamString = ServiceUtils.toURLQueryPart($queryParams);

        var $headerParams = Map.of(
            "timezone",Objects.toString(resultTimeZone)
        );
        var $headers = ServiceUtils.toHeaders($headerParams);

        var $uri = URI.create($path + $queryParamString);
        var $request = HttpRequest.newBuilder()
                .uri($uri)
                .headers($headers)
                .GET()
                .build();

        try {
            var $response = this.client.send($request, BodyHandlers.ofString());
            if ($response.statusCode() == 200 ) {
                return ServiceUtils.mapObjects($response, EventViewDTOImpl::of);
            } else if ($response.statusCode() == 404 ) {
                throw new NotFoundException(ServiceUtils.mapString($response), null);
            } else if ($response.statusCode() == 400 ) {
                throw new InvalidArgumentException(ServiceUtils.mapString($response), null);
            }
            throw new IllegalStateException(String.format("Unsupported Http-Status '%s':\n%s", $response.statusCode(), $response.body()));
        } catch (IOException | InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

}
