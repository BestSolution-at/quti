// Generated by RSD - Do not modify
package at.bestsolution.quti.client.jdkhttp.impl.model;

import java.time.ZonedDateTime;
import java.util.List;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import at.bestsolution.quti.client.model.mixins.EventViewDataMixin;
import at.bestsolution.quti.client.model.SeriesEventView;

public class SeriesEventViewDataImpl extends _BaseDataImpl implements SeriesEventView.Data {
	SeriesEventViewDataImpl(JsonObject data) {
		super(data);
	}

	public String masterEventKey() {
		return _JsonUtils.mapString(data, "masterEventKey");
	}

	public String key() {
		return _JsonUtils.mapString(data, "key");
	}

	public String calendarKey() {
		return _JsonUtils.mapString(data, "calendarKey");
	}

	public String title() {
		return _JsonUtils.mapString(data, "title");
	}

	public String description() {
		return _JsonUtils.mapString(data, "description");
	}

	public String owner() {
		return _JsonUtils.mapString(data, "owner");
	}

	public EventViewDataMixin.Status status() {
		return _JsonUtils.mapLiteral(data, "status", EventViewDataMixin.Status::valueOf);
	}

	public ZonedDateTime start() {
		return _JsonUtils.mapZonedDateTime(data, "start");
	}

	public ZonedDateTime end() {
		return _JsonUtils.mapZonedDateTime(data, "end");
	}

	public List<String> tags() {
		return _JsonUtils.mapStrings(data, "tags");
	}

	public List<String> referencedCalendars() {
		return _JsonUtils.mapStrings(data, "referencedCalendars");
	}

	public static SeriesEventView.Data of(JsonObject obj) {
		return new SeriesEventViewDataImpl(obj);
	}

	public String toString() {
		return "%s[%s=%s]".formatted(getClass().getSimpleName(), "key", key());
	}

	public static class DataBuilderImpl implements SeriesEventView.DataBuilder {
		private JsonObjectBuilder $builder = Json.createObjectBuilder();

		public DataBuilderImpl() {
			$builder.add("@type", "series");
		}

		public SeriesEventView.DataBuilder masterEventKey(String masterEventKey) {
			if (masterEventKey == null) {
				return this;
			}
			$builder.add("masterEventKey", masterEventKey);
			return this;
		}

		public SeriesEventView.DataBuilder key(String key) {
			$builder.add("key", key);
			return this;
		}

		public SeriesEventView.DataBuilder calendarKey(String calendarKey) {
			if (calendarKey == null) {
				return this;
			}
			$builder.add("calendarKey", calendarKey);
			return this;
		}

		public SeriesEventView.DataBuilder title(String title) {
			if (title == null) {
				return this;
			}
			$builder.add("title", title);
			return this;
		}

		public SeriesEventView.DataBuilder description(String description) {
			if (description == null) {
				return this;
			}
			$builder.add("description", description);
			return this;
		}

		public SeriesEventView.DataBuilder owner(String owner) {
			if (owner == null) {
				return this;
			}
			$builder.add("owner", owner);
			return this;
		}

		public SeriesEventView.DataBuilder status(EventViewDataMixin.Status status) {
			if (status == null) {
				return this;
			}
			$builder.add("status", status.toString());
			return this;
		}

		public SeriesEventView.DataBuilder start(ZonedDateTime start) {
			if (start == null) {
				return this;
			}
			$builder.add("start", start.toString());
			return this;
		}

		public SeriesEventView.DataBuilder end(ZonedDateTime end) {
			if (end == null) {
				return this;
			}
			$builder.add("end", end.toString());
			return this;
		}

		public SeriesEventView.DataBuilder tags(List<String> tags) {
			if (tags == null) {
				return this;
			}
			$builder.add("tags", _JsonUtils.toJsonStringArray(tags));
			return this;
		}

		public SeriesEventView.DataBuilder referencedCalendars(List<String> referencedCalendars) {
			if (referencedCalendars == null) {
				return this;
			}
			$builder.add("referencedCalendars", _JsonUtils.toJsonStringArray(referencedCalendars));
			return this;
		}

		public SeriesEventView.Data build() {
			return new SeriesEventViewDataImpl($builder.build());
		}
	}

	public static SeriesEventView.DataBuilder builder() {
		return new DataBuilderImpl();
	}
}
